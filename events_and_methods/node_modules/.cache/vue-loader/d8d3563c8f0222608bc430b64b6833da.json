{"remainingRequest":"/home/caio/.config/yarn/global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/caio/Área de Trabalho/vue_concepts/events_and_methods/app.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/caio/Área de Trabalho/vue_concepts/events_and_methods/app.vue","mtime":1618189888597},{"path":"/home/caio/.config/yarn/global/node_modules/css-loader/dist/cjs.js","mtime":1617925172315},{"path":"/home/caio/.config/yarn/global/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1616537794588},{"path":"/home/caio/.config/yarn/global/node_modules/postcss-loader/src/index.js","mtime":1614117387148},{"path":"/home/caio/.config/yarn/global/node_modules/cache-loader/dist/cjs.js","mtime":1616537793644},{"path":"/home/caio/.config/yarn/global/node_modules/vue-loader/lib/index.js","mtime":1616537794588}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5saW5lLXRocm91Z2ggewogIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoOwp9Ci50YXNrLWl0ZW17CiAgY3Vyc29yOiBwb2ludGVyOwp9Cg=="},{"version":3,"sources":["app.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;AACA","file":"app.vue","sourceRoot":".","sourcesContent":["<template>\n  <div>\n    <h1>Minha lista de tarefas</h1>\n    <!-- Vai disparar ao clicar -->\n    <button @click=\"handleShowList()\">Ver a Lista!</button>\n    <br />\n    <!-- Criando diretiva propria -->\n    <input type=\"text\" v-focus />\n    <ul v-if=\"showList\">\n      <!-- Com o v-if não irá aparecer a lista pois está como false -->\n      <!-- v-for é uma diretiva de iteração -->\n      <li v-for=\"(task, index) in tasks\"\n       @dblclick=\"complete(task)\"\n       :class=\"{ 'line-through': task.isDone }\"\n       class=\"task-item\"\n       :key=\"`${task}-${index}`\">\n       <!-- O valor não pode se repetir, como não tem index, fazemos assim -->\n        <!-- Registrando um evento de duplo clique -->\n        <!-- v-bind para colocar a classe line-through quando a task for true -->\n        {{ task.name }}\n        <!-- método remove passando um param task que estou percorrendo no v-for -->\n        <button @click=\"remove(task)\">&times;</button>\n        <!-- Ao rodar vai aparecer: \"Fazer o curso\" -->\n\n      </li>\n    </ul>\n    <!-- Se eu quiser a condição oposta ao v-if anterior: -->\n    <p v-else>Lista de tarefas está escondida, clique no botão!</p>\n  </div>\n</template>\n\n<script>\n// Criando diretiva propria\nconst focus = {\n  // Quando a diretiva é inserida, recebo alguns params (el = element)\n  inserted: (el) => {\n    el.focus();\n  },\n};\n\n// Componente:\nexport default {\n  // Registrando diretivas\n  directives: {\n    focus,\n  },\n\n  data: () => ({\n    showList: false,\n    tasks: [{ name: \"Fazer o curso\", isDone: false }],\n  }),\n\n  //Registrando métodos\n  methods: {\n    handleShowList() {\n      // para acessarmos um método dentro de um método, precisamos de this\n      this.showList = !this.showList;\n    },\n    complete(task) {\n      // Agora vou chamar o map, não o filter, pois não vou remover nada da lista\n      // (filtrar), vou ter a mesma list mas com o isDone falso ou true\n      this.tasks = this.tasks.map((t) => {\n        if (t.name === task.name) {\n          return { ...t, isDone: !t.isDone };\n        }\n        return { ...t };\n      });\n    },\n    remove(task) {\n      // Criando um array novo para remover, filtra o array coloca todo mundo de volta\n      // no array, menos o da comparação\n      this.tasks = this.tasks.filter((t) => t.name !== task.name);\n      console.log(\"task\", task);\n    },\n  },\n};\n</script>\n\n<style>\n.line-through {\n  text-decoration: line-through;\n}\n.task-item{\n  cursor: pointer;\n}\n</style>"]}]}